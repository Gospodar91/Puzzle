{"version":3,"sources":["webpack:///./Cell.js","webpack:///./index.js","webpack:///./PicturePuzzle.js"],"names":["Cell","puzzle","ind","this","index","isEmpty","width","dimension","height","el","createDiv","appendChild","setImg","setPosition","div","document","createElement","style","position","backgroundRepeat","backgroundSize","border","onclick","e","console","log","findPosition","currentCellIndex","emptyCellIndex","findEmpty","getXY","x","y","emptyX","emptyY","Math","abs","swapCells","left","top","backgroundImage","imgSrc","backgroundPosition","getPositionFromIndex","floor","parentEl","cells","init","img","Image","onload","setup","src","createWrapper","margin","i","push","shuffle","setTimeout","length","j","random","isAssemble","findIndex","cell","getElementById"],"mappings":"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","file":"main.bacee5ddf12f30afed86.js","sourcesContent":["export default class Cell {\r\n  constructor(puzzle, ind) {\r\n    this.index = ind;\r\n    this.puzzle = puzzle;\r\n    this.isEmpty = false;\r\n    this.width = this.puzzle.width / this.puzzle.dimension;\r\n    this.height = this.puzzle.height / this.puzzle.dimension;\r\n    this.el = this.createDiv();\r\n\r\n    puzzle.el.appendChild(this.el);\r\n    if (this.index === this.puzzle.dimension * this.puzzle.dimension - 1) {\r\n      this.isEmpty = true;\r\n      return;\r\n    }\r\n    this.setImg();\r\n    this.setPosition(this.index)\r\n  }\r\n  createDiv() {\r\n    const div = document.createElement('div');\r\n\r\n    div.style.position = 'absolute';\r\n    div.style.backgroundRepeat = 'no repeat';\r\n    div.style.backgroundSize = `${this.puzzle.width}px ${this.puzzle.height}px`;\r\n    div.style.width = `${this.width}px`;\r\n    div.style.height = `${this.height}px`;\r\n    div.style.border = `1px solid black`;\r\n\r\n    div.onclick = e => {\r\n    \r\n      console.log(\r\n        'this.puzzle.findPosition',\r\n        this.index,\r\n        this.puzzle.findPosition(this.index),\r\n      );\r\n    ;\r\n    const currentCellIndex = this.puzzle.findPosition(this.index);\r\n    const emptyCellIndex = this.puzzle.findEmpty();\r\n \r\n    const { x, y } = this.getXY(currentCellIndex);\r\n    const { x:emptyX, y:emptyY } = this.getXY(emptyCellIndex);\r\n    // console.log('x,y', x, y), console.log('exmptyX', emptyX);\r\n    // console.log('exmptyY', emptyY);\r\n    if(x===emptyX||y===emptyY\r\n    &&(Math.abs(x-emptyX)===1||Math.abs(y-emptyY)===1)){\r\n      this.puzzle.swapCells(currentCellIndex,emptyCellIndex)\r\n      \r\n    }\r\n      }\r\n    return div;\r\n  }\r\n\r\n  setImg() {\r\n    const { x, y } = this.getXY(this.index);\r\n    const left = this.width * x;\r\n    const top = this.height * y;\r\n\r\n    this.el.style.backgroundImage = `url(${this.puzzle.imgSrc})`;\r\n    this.el.style.backgroundPosition = `-${left}px -${top}px`;\r\n  }\r\n  setPosition(index) {\r\n    const { left, top } = this.getPositionFromIndex(index);\r\n    this.el.style.left = `${left}px`;\r\n    this.el.style.top = `${top}px`;\r\n  }\r\n  getPositionFromIndex(index) {\r\n    const { x, y } = this.getXY(index);\r\n    return {\r\n      left: this.width * x,\r\n      top: this.height * y,\r\n    };\r\n  }\r\n\r\n  getXY(index) {\r\n    return {\r\n      x: index % this.puzzle.dimension,\r\n      y: Math.floor(index / this.puzzle.dimension),\r\n    };\r\n  }\r\n}\r\n","import './styles.css';\r\nimport PicturePuzzle from './PicturePuzzle'\r\n\r\n\r\n\r\n\r\n\r\nconst picturePuzzle=new  PicturePuzzle(document.getElementById(\"puzzle-wrapper\"),'http://cs.pikabu.ru/images/jobseeker/logo2.png',400)\r\n\r\n","import Cell from './Cell';\r\nexport default class PicturePuzzle {\r\n  constructor(el, imgSrc, width) {\r\n    this.parentEl = el;\r\n    this.dimension = 5;\r\n    this.imgSrc = imgSrc;\r\n    this.width = width;\r\n    this.cells = [];\r\n    this.init();\r\n\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      this.height = (img.height * this.width) / img.width;\r\n      this.el.style.width = `${this.width}px`;\r\n      this.el.style.height = `${this.height}px`;\r\n      this.setup();\r\n    };\r\n    img.src = this.imgSrc;\r\n  }\r\n  createWrapper() {\r\n    const div = document.createElement('div');\r\n    div.style.position = 'relative';\r\n    div.style.margin = '0 auto';\r\n\r\n    return div;\r\n  }\r\n  init() {\r\n    this.el = this.createWrapper();\r\n    this.parentEl.appendChild(this.el);\r\n  }\r\n  setup() {\r\n    for (let i = 0; i < this.dimension * this.dimension; i++) {\r\n      this.cells.push(new Cell(this, i));\r\n    }\r\n    // setTimeout(this.shuffle,1000)\r\n    this.shuffle();\r\n    setTimeout(console.log('testSetTimeout', ),5000)\r\n  }\r\n  \r\n  shuffle() {\r\n\r\n    for (let i = this.cells.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      this.swapCells(i, j);\r\n    }\r\n\r\n    console.log('i', this.cells);\r\n  }\r\n  swapCells(i, j) {\r\n    [this.cells[i], this.cells[j]] = [this.cells[j], this.cells[i]];\r\n    this.cells[i].setPosition(i);\r\n    this.cells[j].setPosition(j);\r\n    if (this.isAssemble()) {\r\n      console.log('win');\r\n    }\r\n  }\r\n  findPosition(index) {\r\n    return this.cells.findIndex(cell => cell.index === index);\r\n  }\r\n  findEmpty() {\r\n    return this.cells.findIndex(cell => cell.isEmpty);\r\n  }\r\n  isAssemble() {\r\n    for (let i = 0; i < 4; i++) {\r\n      if (i !== this.cells[i].index) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":""}